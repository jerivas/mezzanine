# 
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-19 13:59-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../model-customization.rst:3
msgid "Model Customization"
msgstr ""

#: ../model-customization.rst:5
msgid ""
"So far under :doc:`content-architecture` the concept of subclassing "
"Mezzanine's models has been described. This section describes the hooks "
"Mezzanine provides for directly modifying the behaviour of its models."
msgstr ""

#: ../model-customization.rst:10
msgid "Field Injection"
msgstr ""

#: ../model-customization.rst:12
msgid ""
"Mezzanine provides the setting ``EXTRA_MODEL_FIELDS`` which allows you to "
"define a sequence of fields that will be injected into Mezzanine's (or any "
"library's) models."
msgstr ""

#: ../model-customization.rst:18
msgid ""
"Using the following approach comes with certain trade-offs described below "
"in :ref:`field-injection-caveats`. Be sure to fully understand these prior "
"to using the ``EXTRA_MODEL_FIELDS`` setting."
msgstr ""

#: ../model-customization.rst:22
msgid ""
"Each item in the ``EXTRA_MODEL_FIELDS`` sequence is a four item sequence. "
"The first two items are the dotted path to the model and its field name to "
"be added, and the dotted path to the field class to use for the field. The "
"third and fourth items are a sequence of positional args and a dictionary of"
" keyword args, to use when creating the field instance."
msgstr ""

#: ../model-customization.rst:29
msgid ""
"For example suppose you want to inject a custom ``ImageField`` from a third "
"party library into Mezzanine's ``BlogPost`` model, you would define the "
"following in your projectsâ€™s settings module::"
msgstr ""

#: ../model-customization.rst:47
msgid ""
"Each ``BlogPost`` instance will now have an ``image`` attribute, using the "
"``ImageField`` class defined in the fictitious ``somelib.fields`` module."
msgstr ""

#: ../model-customization.rst:50
msgid ""
"Another interesting example would be adding a field to all of Mezzanine's "
"content types by injecting fields into the ``Page`` class. Continuing on "
"from the previous example, suppose you wanted to add a regular Django "
"``IntegerField`` to all content types::"
msgstr ""

#: ../model-customization.rst:71
msgid ""
"Note here that the full path for the field class isn't required since a "
"regular Django field is used - the ``django.db.models.`` path is implied."
msgstr ""

#: ../model-customization.rst:77
msgid "Field Injection Caveats"
msgstr ""

#: ../model-customization.rst:79
msgid ""
"The above technique provides a great way of avoiding the performance "
"penalties of SQL JOINS required by the traditional approach of `subclassing "
"models <https://docs.djangoproject.com/en/1.3/topics/db/models/#multi-table-"
"inheritance>`_, however some extra consideration is required when used with "
"migration tools like `South <http://south.aeracode.org/>`_. In the first "
"example above, South views the new ``image`` field on the ``BlogPost`` model"
" of the ``mezzanine.blog`` app. As such in order to create a migration for "
"it, the migration must be created for the blog app itself and by default "
"would end up in the migrations directory of the blog app, which completely "
"goes against the notion of not modifying the blog app to add your own custom"
" fields."
msgstr ""

#: ../model-customization.rst:91
msgid ""
"One approach to address this is to use the ``--stdout`` argument of South's "
"``schemamigration`` command, and create your own migration file located "
"somewhere in your project or app::"
msgstr ""

#: ../model-customization.rst:98
msgid ""
"Be warned that over time this approach will almost certainly require some "
"manual intervention by way of editing migrations, or modifying the database "
"manually to create the correct state. Ultimately there is a trade-off "
"involved here."
msgstr ""

#: ../model-customization.rst:104
msgid "Admin Fields"
msgstr ""

#: ../model-customization.rst:106
msgid ""
"Whether using the above approach to inject fields onto models, or taking the"
" more traditional approach of subclassing models, most often you will also "
"want to expose new fields to the admin interface. This can be achieve by "
"simply unregistering the relevant admin class, subclassing it, and re-"
"registering your new admin class for the associated model. Continuing on "
"from the first example, the code below takes a copy of the ``fieldsets`` "
"definition for the original ``BlogPostAdmin``, and injects our custom "
"field's name into the desired position.::"
msgstr ""
